<?php

namespace Apachecms\BackendBundle\Repository;

/**
 * StatRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StatRepository extends \Doctrine\ORM\EntityRepository
{
    public function getCoords($landing){
		return $this->createQueryBuilder('e')
        ->select('e')
        ->where('e.isDelete = :isDelete')
        ->andWhere('e.landingId = :landing')
        ->andWhere('e.lat is not null')
        ->andWhere('e.lng is not null')
		->setParameter('isDelete',false)
		->setParameter('landing',$landing)
        ->orderBy("e.id","DESC");
    }

    public function getByDevice($landing){
		$qb= $this->createQueryBuilder('e')
        ->select(array('COUNT(e.id)', 'e.isMobile'))
        ->where('e.isDelete = :isDelete')
        ->andWhere('e.landingId = :landing')
		->setParameter('landing',$landing)
		->setParameter('isDelete',false)
        ->groupBy('e.isMobile');
        $results=$qb->getQuery()->getScalarResult();
        $data=array();
        foreach ($results as $key => $value) {
            if($value['isMobile']===null){
                $data[]=array('name'=>'other','drilldown'=>'other','cant'=>$value['1'],'y'=>($value["1"]*100)/$this->getTotal($landing));
            }elseif($value['isMobile']==1){
                $data[]=array('name'=>'mobile','drilldown'=>'mobile','cant'=>$value['1'],'y'=>($value["1"]*100)/$this->getTotal($landing));
            }else{
                $data[]=array('name'=>'desktop','drilldown'=>'desktop','cant'=>$value['1'],'y'=>($value["1"]*100)/$this->getTotal($landing));
            }
        }
        return $data;
    }
    public function getByBrowser($landing){
		$qb= $this->createQueryBuilder('e')
        ->select('COUNT(e.id), e.browser')
        ->where('e.isDelete = :isDelete')
        ->andWhere('e.landingId = :landing')
		->setParameter('landing',$landing)
		->setParameter('isDelete',false)
        ->groupBy("e.browser");
        $results=$qb->getQuery()->getScalarResult();
        $data=array();
        foreach ($results as $key => $value) {
            $data[]=array('name'=>($value['browser'])?$value['browser']:'other','cant'=>$value['1'],'y'=>($value["1"]*100)/$this->getTotal($landing));
        }
        return $data;
    }
    public function getByOS($landing){
		$qb= $this->createQueryBuilder('e')
        ->select('COUNT(e.id), e.os')
        ->where('e.isDelete = :isDelete')
        ->andWhere('e.landingId = :landing')
		->setParameter('landing',$landing)
		->setParameter('isDelete',false)
        ->groupBy("e.os");
        $results=$qb->getQuery()->getScalarResult();
        $data=array();
        foreach ($results as $key => $value) {
            $data[]=array('name'=>($value['os'])?$value['os']:'other','cant'=>$value['1'],'y'=>($value["1"]*100)/$this->getTotal($landing));
        }
        return $data;
    }
    public function getByLanguage($landing){
		$qb= $this->createQueryBuilder('e')
        ->select('COUNT(e.id), e.language')
        ->where('e.isDelete = :isDelete')
        ->andWhere('e.landingId = :landing')
		->setParameter('landing',$landing)
		->setParameter('isDelete',false)
        ->groupBy("e.language");
        $results=$qb->getQuery()->getScalarResult();
        $data=array();
        foreach ($results as $key => $value) {
            $data[]=array('name'=>($value['language'])?$value['language']:'other','cant'=>$value['1'],'y'=>($value["1"]*100)/$this->getTotal($landing));
        }
        return $data;
    }
    public function getByDate($landing){
		$qb= $this->createQueryBuilder('e')
        ->select('COUNT(e.id), e.date')
        ->where('e.isDelete = :isDelete')
        ->andWhere('e.landingId = :landing')
		->setParameter('landing',$landing)
		->setParameter('isDelete',false)
        ->groupBy("e.date");
        $results=$qb->getQuery()->getScalarResult();
        $categories=array();
        $values=array();
        foreach ($results as $key => $value) {
            $categories[]=$value['date'];
            $values[]=(int)$value['1'];
        }
        return array('categories'=>$categories,'values'=>$values);
    }
    public function getTotal($landing){
        $qb = $this->createQueryBuilder('e')->select('COUNT(e.id)')
        ->andWhere('e.landingId = :landing')
		->setParameter('landing',$landing);
        $count = $qb->getQuery()->getSingleScalarResult();
        return $count;
    }
}   
